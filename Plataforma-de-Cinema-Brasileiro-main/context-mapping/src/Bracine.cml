Domain Bracine {
    Subdomain Administracao
    Subdomain Interacao
    Subdomain Recomendacao
    Subdomain Discussao
    Subdomain Tendencia
}

ContextMap BracineContextMap {
    contains Administracao
    contains Interacao
    contains Recomendacao
    contains Discussao
    contains Tendencia

    Administracao Shared-Kernel Interacao
    Interacao Shared-Kernel Recomendacao
    Recomendacao Shared-Kernel Tendencia
}

BoundedContext Administracao implements Administracao {
    Aggregate Filme {
        Entity Filme {
            aggregateRoot
            -FilmeId id
            String titulo
            String diretor
            String genero
            String descricao
            Date anoLancamento
            String elenco
            String festivais
            String localizacao
            String streamingDisponivel

            def void atualizarDescricao(@Descricao descricao);
            def void adicionarFestival(@Festival festival);
        }

        ValueObject FilmeId {
            int id
        }

        ValueObject Festival {
            String nome
            Date data
        }

        ValueObject Descricao {
            String texto
        }
    }

    Service FilmeService {
        void adicionarFilme(@FilmeId filmeId);
        void removerFilme(@FilmeId filmeId);
    }

    Repository FilmeRepository {
        Filme findById(FilmeId id);
        void save(Filme filme);
        void delete(FilmeId id);
    }
}

BoundedContext Interacao implements Interacao {
    Aggregate Usuario {
        Entity Usuario {
            aggregateRoot
            -UsuarioId id
            String nome
            String email
            List<FilmeId> filmesAssistidos
            List<Avaliacao> avaliacoes

            def void adicionarFilmeAssistido(@FilmeId filmeId);
            def void adicionarAvaliacao(@Avaliacao avaliacao);
        }

        ValueObject UsuarioId {
            int id
        }

        ValueObject Avaliacao {
            int nota
            String comentario
        }

        ValueObject Comentario {
            String texto
        }
    }

    Service UsuarioService {
        void avaliarFilme(@FilmeId filmeId, @Nota nota);
        void comentarFilme(@FilmeId filmeId, @Comentario comentario);
    }

    Repository UsuarioRepository {
        Usuario findById(UsuarioId id);
        void save(Usuario usuario);
        void delete(UsuarioId id);
    }
}

BoundedContext Recomendacao implements Recomendacao {
    Aggregate Recomendacao {
        Entity Recomendacao {
            aggregateRoot
            -RecomendacaoId id
            -UsuarioId usuarioId
            List<FilmeId> filmesRecomendados

            def void adicionarFilmeRecomendado(@FilmeId filmeId);
        }

        ValueObject RecomendacaoId {
            int id
        }
    }

    Service RecomendacaoService {
        List<Filme> recomendarFilmes(@UsuarioId usuarioId);
    }

    Repository RecomendacaoRepository {
        Recomendacao findById(RecomendacaoId id);
        void save(Recomendacao recomendacao);
        void delete(RecomendacaoId id);
    }
}

BoundedContext Discussao implements Discussao {
    Aggregate SalaDeDiscussao {
        Entity SalaDeDiscussao {
            aggregateRoot
            -SalaId id
            -FilmeId filmeId
            List<Comentario> comentarios

            def void adicionarComentario(@Comentario comentario);
        }

        ValueObject SalaId {
            int id
        }
    }

    Service DiscussaoService {
        void criarSala(@FilmeId filmeId);
        void comentarSala(@SalaId salaId, @Comentario comentario);
    }

    Repository SalaDeDiscussaoRepository {
        SalaDeDiscussao findById(SalaId id);
        void save(SalaDeDiscussao sala);
        void delete(SalaId id);
    }
}

BoundedContext Tendencia implements Tendencia {
    Aggregate Tendencia {
        Entity Tendencia {
            aggregateRoot
            -TendenciaId id
            List<FilmeId> filmesEmAlta

            def void adicionarFilmeEmAlta(@FilmeId filmeId);
        }

        ValueObject TendenciaId {
            int id
        }
    }

    Service TendenciaService {
        List<Filme> calcularTendencias();
    }

    Repository TendenciaRepository {
        Tendencia findById(TendenciaId id);
        void save(Tendencia tendencia);
        void delete(TendenciaId id);
    }
}
